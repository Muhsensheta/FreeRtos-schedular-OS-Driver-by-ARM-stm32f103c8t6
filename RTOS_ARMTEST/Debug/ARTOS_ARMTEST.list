
ARTOS_ARMTEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000718  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000848  08000850  00010850  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000848  08000848  00010850  2**0
                  CONTENTS
  4 .ARM          00000000  08000848  08000848  00010850  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000848  08000850  00010850  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000848  08000848  00010848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800084c  0800084c  0001084c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010850  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  20000000  08000850  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000048  08000850  00020048  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010850  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000ba6  00000000  00000000  00010879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000644  00000000  00000000  0001141f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f8  00000000  00000000  00011a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000180  00000000  00000000  00011c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000f95  00000000  00000000  00011de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000b10  00000000  00000000  00012d75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003eac  00000000  00000000  00013885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00017731  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005e0  00000000  00000000  00017784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000830 	.word	0x08000830

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000830 	.word	0x08000830

08000170 <M_GPIO_void_SetPinDir>:

#include "DIO_priv.h"
#include "DIO_int.h"

void M_GPIO_void_SetPinDir(u8 PortID , u8 PinID , u8 Dir)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
 800017a:	460b      	mov	r3, r1
 800017c:	71bb      	strb	r3, [r7, #6]
 800017e:	4613      	mov	r3, r2
 8000180:	717b      	strb	r3, [r7, #5]
	//Range Check
if(PortID < 3 && PinID < 16 && Dir < 16)
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	2b02      	cmp	r3, #2
 8000186:	f200 80b6 	bhi.w	80002f6 <M_GPIO_void_SetPinDir+0x186>
 800018a:	79bb      	ldrb	r3, [r7, #6]
 800018c:	2b0f      	cmp	r3, #15
 800018e:	f200 80b2 	bhi.w	80002f6 <M_GPIO_void_SetPinDir+0x186>
 8000192:	797b      	ldrb	r3, [r7, #5]
 8000194:	2b0f      	cmp	r3, #15
 8000196:	f200 80ae 	bhi.w	80002f6 <M_GPIO_void_SetPinDir+0x186>
{
	if(PinID < 8) /*PIN0 : PIN7 --> CRL*/
 800019a:	79bb      	ldrb	r3, [r7, #6]
 800019c:	2b07      	cmp	r3, #7
 800019e:	d852      	bhi.n	8000246 <M_GPIO_void_SetPinDir+0xd6>
	{
		switch(PortID)
 80001a0:	79fb      	ldrb	r3, [r7, #7]
 80001a2:	2b02      	cmp	r3, #2
 80001a4:	d037      	beq.n	8000216 <M_GPIO_void_SetPinDir+0xa6>
 80001a6:	2b02      	cmp	r3, #2
 80001a8:	f300 80a6 	bgt.w	80002f8 <M_GPIO_void_SetPinDir+0x188>
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	d002      	beq.n	80001b6 <M_GPIO_void_SetPinDir+0x46>
 80001b0:	2b01      	cmp	r3, #1
 80001b2:	d018      	beq.n	80001e6 <M_GPIO_void_SetPinDir+0x76>
			GPIOC_CRH |=  ((Dir)<<(PinID * 4)); //Assign The 4 Bits
			break;
		}
	}
	}
}
 80001b4:	e0a0      	b.n	80002f8 <M_GPIO_void_SetPinDir+0x188>
			GPIOA_CRL &= ~(0b1111<<(PinID * 4)); //Clear the 4 Bits
 80001b6:	4b53      	ldr	r3, [pc, #332]	; (8000304 <M_GPIO_void_SetPinDir+0x194>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	79ba      	ldrb	r2, [r7, #6]
 80001bc:	0092      	lsls	r2, r2, #2
 80001be:	210f      	movs	r1, #15
 80001c0:	fa01 f202 	lsl.w	r2, r1, r2
 80001c4:	43d2      	mvns	r2, r2
 80001c6:	4611      	mov	r1, r2
 80001c8:	4a4e      	ldr	r2, [pc, #312]	; (8000304 <M_GPIO_void_SetPinDir+0x194>)
 80001ca:	400b      	ands	r3, r1
 80001cc:	6013      	str	r3, [r2, #0]
			GPIOA_CRL |=  ((Dir)<<(PinID * 4)); //Assign The 4 Bits
 80001ce:	4b4d      	ldr	r3, [pc, #308]	; (8000304 <M_GPIO_void_SetPinDir+0x194>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	7979      	ldrb	r1, [r7, #5]
 80001d4:	79ba      	ldrb	r2, [r7, #6]
 80001d6:	0092      	lsls	r2, r2, #2
 80001d8:	fa01 f202 	lsl.w	r2, r1, r2
 80001dc:	4611      	mov	r1, r2
 80001de:	4a49      	ldr	r2, [pc, #292]	; (8000304 <M_GPIO_void_SetPinDir+0x194>)
 80001e0:	430b      	orrs	r3, r1
 80001e2:	6013      	str	r3, [r2, #0]
			break;
 80001e4:	e088      	b.n	80002f8 <M_GPIO_void_SetPinDir+0x188>
			GPIOB_CRL &= ~(0b1111<<(PinID * 4)); //Clear the 4 Bits
 80001e6:	4b48      	ldr	r3, [pc, #288]	; (8000308 <M_GPIO_void_SetPinDir+0x198>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	79ba      	ldrb	r2, [r7, #6]
 80001ec:	0092      	lsls	r2, r2, #2
 80001ee:	210f      	movs	r1, #15
 80001f0:	fa01 f202 	lsl.w	r2, r1, r2
 80001f4:	43d2      	mvns	r2, r2
 80001f6:	4611      	mov	r1, r2
 80001f8:	4a43      	ldr	r2, [pc, #268]	; (8000308 <M_GPIO_void_SetPinDir+0x198>)
 80001fa:	400b      	ands	r3, r1
 80001fc:	6013      	str	r3, [r2, #0]
			GPIOB_CRL |=  ((Dir)<<(PinID * 4)); //Assign The 4 Bits
 80001fe:	4b42      	ldr	r3, [pc, #264]	; (8000308 <M_GPIO_void_SetPinDir+0x198>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	7979      	ldrb	r1, [r7, #5]
 8000204:	79ba      	ldrb	r2, [r7, #6]
 8000206:	0092      	lsls	r2, r2, #2
 8000208:	fa01 f202 	lsl.w	r2, r1, r2
 800020c:	4611      	mov	r1, r2
 800020e:	4a3e      	ldr	r2, [pc, #248]	; (8000308 <M_GPIO_void_SetPinDir+0x198>)
 8000210:	430b      	orrs	r3, r1
 8000212:	6013      	str	r3, [r2, #0]
			break;
 8000214:	e070      	b.n	80002f8 <M_GPIO_void_SetPinDir+0x188>
			GPIOC_CRL &= ~(0b1111<<(PinID * 4)); //Clear the 4 Bits
 8000216:	4b3d      	ldr	r3, [pc, #244]	; (800030c <M_GPIO_void_SetPinDir+0x19c>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	79ba      	ldrb	r2, [r7, #6]
 800021c:	0092      	lsls	r2, r2, #2
 800021e:	210f      	movs	r1, #15
 8000220:	fa01 f202 	lsl.w	r2, r1, r2
 8000224:	43d2      	mvns	r2, r2
 8000226:	4611      	mov	r1, r2
 8000228:	4a38      	ldr	r2, [pc, #224]	; (800030c <M_GPIO_void_SetPinDir+0x19c>)
 800022a:	400b      	ands	r3, r1
 800022c:	6013      	str	r3, [r2, #0]
			GPIOC_CRL |=  ((Dir)<<(PinID * 4)); //Assign The 4 Bits
 800022e:	4b37      	ldr	r3, [pc, #220]	; (800030c <M_GPIO_void_SetPinDir+0x19c>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	7979      	ldrb	r1, [r7, #5]
 8000234:	79ba      	ldrb	r2, [r7, #6]
 8000236:	0092      	lsls	r2, r2, #2
 8000238:	fa01 f202 	lsl.w	r2, r1, r2
 800023c:	4611      	mov	r1, r2
 800023e:	4a33      	ldr	r2, [pc, #204]	; (800030c <M_GPIO_void_SetPinDir+0x19c>)
 8000240:	430b      	orrs	r3, r1
 8000242:	6013      	str	r3, [r2, #0]
			break;
 8000244:	e058      	b.n	80002f8 <M_GPIO_void_SetPinDir+0x188>
	else if(PinID < 16) /*PIN0 : PIN7 --> CRL*/
 8000246:	79bb      	ldrb	r3, [r7, #6]
 8000248:	2b0f      	cmp	r3, #15
 800024a:	d854      	bhi.n	80002f6 <M_GPIO_void_SetPinDir+0x186>
		PinID -=8;
 800024c:	79bb      	ldrb	r3, [r7, #6]
 800024e:	3b08      	subs	r3, #8
 8000250:	71bb      	strb	r3, [r7, #6]
		switch(PortID)
 8000252:	79fb      	ldrb	r3, [r7, #7]
 8000254:	2b02      	cmp	r3, #2
 8000256:	d036      	beq.n	80002c6 <M_GPIO_void_SetPinDir+0x156>
 8000258:	2b02      	cmp	r3, #2
 800025a:	dc4d      	bgt.n	80002f8 <M_GPIO_void_SetPinDir+0x188>
 800025c:	2b00      	cmp	r3, #0
 800025e:	d002      	beq.n	8000266 <M_GPIO_void_SetPinDir+0xf6>
 8000260:	2b01      	cmp	r3, #1
 8000262:	d018      	beq.n	8000296 <M_GPIO_void_SetPinDir+0x126>
}
 8000264:	e048      	b.n	80002f8 <M_GPIO_void_SetPinDir+0x188>
			GPIOA_CRH &= ~(0b1111<<(PinID * 4)); //Clear the 4 Bits
 8000266:	4b2a      	ldr	r3, [pc, #168]	; (8000310 <M_GPIO_void_SetPinDir+0x1a0>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	79ba      	ldrb	r2, [r7, #6]
 800026c:	0092      	lsls	r2, r2, #2
 800026e:	210f      	movs	r1, #15
 8000270:	fa01 f202 	lsl.w	r2, r1, r2
 8000274:	43d2      	mvns	r2, r2
 8000276:	4611      	mov	r1, r2
 8000278:	4a25      	ldr	r2, [pc, #148]	; (8000310 <M_GPIO_void_SetPinDir+0x1a0>)
 800027a:	400b      	ands	r3, r1
 800027c:	6013      	str	r3, [r2, #0]
			GPIOA_CRH |=  ((Dir)<<(PinID * 4)); //Assign The 4 Bits
 800027e:	4b24      	ldr	r3, [pc, #144]	; (8000310 <M_GPIO_void_SetPinDir+0x1a0>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	7979      	ldrb	r1, [r7, #5]
 8000284:	79ba      	ldrb	r2, [r7, #6]
 8000286:	0092      	lsls	r2, r2, #2
 8000288:	fa01 f202 	lsl.w	r2, r1, r2
 800028c:	4611      	mov	r1, r2
 800028e:	4a20      	ldr	r2, [pc, #128]	; (8000310 <M_GPIO_void_SetPinDir+0x1a0>)
 8000290:	430b      	orrs	r3, r1
 8000292:	6013      	str	r3, [r2, #0]
			break;
 8000294:	e030      	b.n	80002f8 <M_GPIO_void_SetPinDir+0x188>
			GPIOB_CRH &= ~(0b1111<<(PinID * 4)); //Clear the 4 Bits
 8000296:	4b1f      	ldr	r3, [pc, #124]	; (8000314 <M_GPIO_void_SetPinDir+0x1a4>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	79ba      	ldrb	r2, [r7, #6]
 800029c:	0092      	lsls	r2, r2, #2
 800029e:	210f      	movs	r1, #15
 80002a0:	fa01 f202 	lsl.w	r2, r1, r2
 80002a4:	43d2      	mvns	r2, r2
 80002a6:	4611      	mov	r1, r2
 80002a8:	4a1a      	ldr	r2, [pc, #104]	; (8000314 <M_GPIO_void_SetPinDir+0x1a4>)
 80002aa:	400b      	ands	r3, r1
 80002ac:	6013      	str	r3, [r2, #0]
			GPIOB_CRH |=  ((Dir)<<(PinID * 4)); //Assign The 4 Bits
 80002ae:	4b19      	ldr	r3, [pc, #100]	; (8000314 <M_GPIO_void_SetPinDir+0x1a4>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	7979      	ldrb	r1, [r7, #5]
 80002b4:	79ba      	ldrb	r2, [r7, #6]
 80002b6:	0092      	lsls	r2, r2, #2
 80002b8:	fa01 f202 	lsl.w	r2, r1, r2
 80002bc:	4611      	mov	r1, r2
 80002be:	4a15      	ldr	r2, [pc, #84]	; (8000314 <M_GPIO_void_SetPinDir+0x1a4>)
 80002c0:	430b      	orrs	r3, r1
 80002c2:	6013      	str	r3, [r2, #0]
			break;
 80002c4:	e018      	b.n	80002f8 <M_GPIO_void_SetPinDir+0x188>
			GPIOC_CRH &= ~(0b1111<<(PinID * 4)); //Clear the 4 Bits
 80002c6:	4b14      	ldr	r3, [pc, #80]	; (8000318 <M_GPIO_void_SetPinDir+0x1a8>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	79ba      	ldrb	r2, [r7, #6]
 80002cc:	0092      	lsls	r2, r2, #2
 80002ce:	210f      	movs	r1, #15
 80002d0:	fa01 f202 	lsl.w	r2, r1, r2
 80002d4:	43d2      	mvns	r2, r2
 80002d6:	4611      	mov	r1, r2
 80002d8:	4a0f      	ldr	r2, [pc, #60]	; (8000318 <M_GPIO_void_SetPinDir+0x1a8>)
 80002da:	400b      	ands	r3, r1
 80002dc:	6013      	str	r3, [r2, #0]
			GPIOC_CRH |=  ((Dir)<<(PinID * 4)); //Assign The 4 Bits
 80002de:	4b0e      	ldr	r3, [pc, #56]	; (8000318 <M_GPIO_void_SetPinDir+0x1a8>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	7979      	ldrb	r1, [r7, #5]
 80002e4:	79ba      	ldrb	r2, [r7, #6]
 80002e6:	0092      	lsls	r2, r2, #2
 80002e8:	fa01 f202 	lsl.w	r2, r1, r2
 80002ec:	4611      	mov	r1, r2
 80002ee:	4a0a      	ldr	r2, [pc, #40]	; (8000318 <M_GPIO_void_SetPinDir+0x1a8>)
 80002f0:	430b      	orrs	r3, r1
 80002f2:	6013      	str	r3, [r2, #0]
			break;
 80002f4:	e000      	b.n	80002f8 <M_GPIO_void_SetPinDir+0x188>
	}
 80002f6:	bf00      	nop
}
 80002f8:	bf00      	nop
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bc80      	pop	{r7}
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	40010800 	.word	0x40010800
 8000308:	40010c00 	.word	0x40010c00
 800030c:	40011000 	.word	0x40011000
 8000310:	40010804 	.word	0x40010804
 8000314:	40010c04 	.word	0x40010c04
 8000318:	40011004 	.word	0x40011004

0800031c <M_GPIO_void_SetPinValue>:
void M_GPIO_void_SetPinValue(u8 PortID , u8 PinID , u8 Value)
{
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
 8000322:	4603      	mov	r3, r0
 8000324:	71fb      	strb	r3, [r7, #7]
 8000326:	460b      	mov	r3, r1
 8000328:	71bb      	strb	r3, [r7, #6]
 800032a:	4613      	mov	r3, r2
 800032c:	717b      	strb	r3, [r7, #5]
	//Range Check
if(PortID < 3 && PinID < 16)
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	2b02      	cmp	r3, #2
 8000332:	d861      	bhi.n	80003f8 <M_GPIO_void_SetPinValue+0xdc>
 8000334:	79bb      	ldrb	r3, [r7, #6]
 8000336:	2b0f      	cmp	r3, #15
 8000338:	d85e      	bhi.n	80003f8 <M_GPIO_void_SetPinValue+0xdc>
{
	if(Value == LOW)
 800033a:	797b      	ldrb	r3, [r7, #5]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d12d      	bne.n	800039c <M_GPIO_void_SetPinValue+0x80>
	{
		switch(PortID)
 8000340:	79fb      	ldrb	r3, [r7, #7]
 8000342:	2b02      	cmp	r3, #2
 8000344:	d01e      	beq.n	8000384 <M_GPIO_void_SetPinValue+0x68>
 8000346:	2b02      	cmp	r3, #2
 8000348:	dc57      	bgt.n	80003fa <M_GPIO_void_SetPinValue+0xde>
 800034a:	2b00      	cmp	r3, #0
 800034c:	d002      	beq.n	8000354 <M_GPIO_void_SetPinValue+0x38>
 800034e:	2b01      	cmp	r3, #1
 8000350:	d00c      	beq.n	800036c <M_GPIO_void_SetPinValue+0x50>
			SET_BIT(GPIOC_ODR , PinID);
			break;
		}
	}
}
}
 8000352:	e052      	b.n	80003fa <M_GPIO_void_SetPinValue+0xde>
			CLR_BIT(GPIOA_ODR , PinID);
 8000354:	4b2b      	ldr	r3, [pc, #172]	; (8000404 <M_GPIO_void_SetPinValue+0xe8>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	79ba      	ldrb	r2, [r7, #6]
 800035a:	2101      	movs	r1, #1
 800035c:	fa01 f202 	lsl.w	r2, r1, r2
 8000360:	43d2      	mvns	r2, r2
 8000362:	4611      	mov	r1, r2
 8000364:	4a27      	ldr	r2, [pc, #156]	; (8000404 <M_GPIO_void_SetPinValue+0xe8>)
 8000366:	400b      	ands	r3, r1
 8000368:	6013      	str	r3, [r2, #0]
			break;
 800036a:	e046      	b.n	80003fa <M_GPIO_void_SetPinValue+0xde>
			CLR_BIT(GPIOB_ODR , PinID);
 800036c:	4b26      	ldr	r3, [pc, #152]	; (8000408 <M_GPIO_void_SetPinValue+0xec>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	79ba      	ldrb	r2, [r7, #6]
 8000372:	2101      	movs	r1, #1
 8000374:	fa01 f202 	lsl.w	r2, r1, r2
 8000378:	43d2      	mvns	r2, r2
 800037a:	4611      	mov	r1, r2
 800037c:	4a22      	ldr	r2, [pc, #136]	; (8000408 <M_GPIO_void_SetPinValue+0xec>)
 800037e:	400b      	ands	r3, r1
 8000380:	6013      	str	r3, [r2, #0]
			break;
 8000382:	e03a      	b.n	80003fa <M_GPIO_void_SetPinValue+0xde>
			CLR_BIT(GPIOC_ODR , PinID);
 8000384:	4b21      	ldr	r3, [pc, #132]	; (800040c <M_GPIO_void_SetPinValue+0xf0>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	79ba      	ldrb	r2, [r7, #6]
 800038a:	2101      	movs	r1, #1
 800038c:	fa01 f202 	lsl.w	r2, r1, r2
 8000390:	43d2      	mvns	r2, r2
 8000392:	4611      	mov	r1, r2
 8000394:	4a1d      	ldr	r2, [pc, #116]	; (800040c <M_GPIO_void_SetPinValue+0xf0>)
 8000396:	400b      	ands	r3, r1
 8000398:	6013      	str	r3, [r2, #0]
			break;
 800039a:	e02e      	b.n	80003fa <M_GPIO_void_SetPinValue+0xde>
	else if(Value == HIGH)
 800039c:	797b      	ldrb	r3, [r7, #5]
 800039e:	2b01      	cmp	r3, #1
 80003a0:	d12a      	bne.n	80003f8 <M_GPIO_void_SetPinValue+0xdc>
		switch(PortID)
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	2b02      	cmp	r3, #2
 80003a6:	d01c      	beq.n	80003e2 <M_GPIO_void_SetPinValue+0xc6>
 80003a8:	2b02      	cmp	r3, #2
 80003aa:	dc26      	bgt.n	80003fa <M_GPIO_void_SetPinValue+0xde>
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d002      	beq.n	80003b6 <M_GPIO_void_SetPinValue+0x9a>
 80003b0:	2b01      	cmp	r3, #1
 80003b2:	d00b      	beq.n	80003cc <M_GPIO_void_SetPinValue+0xb0>
}
 80003b4:	e021      	b.n	80003fa <M_GPIO_void_SetPinValue+0xde>
			SET_BIT(GPIOA_ODR , PinID);
 80003b6:	4b13      	ldr	r3, [pc, #76]	; (8000404 <M_GPIO_void_SetPinValue+0xe8>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	79ba      	ldrb	r2, [r7, #6]
 80003bc:	2101      	movs	r1, #1
 80003be:	fa01 f202 	lsl.w	r2, r1, r2
 80003c2:	4611      	mov	r1, r2
 80003c4:	4a0f      	ldr	r2, [pc, #60]	; (8000404 <M_GPIO_void_SetPinValue+0xe8>)
 80003c6:	430b      	orrs	r3, r1
 80003c8:	6013      	str	r3, [r2, #0]
			break;
 80003ca:	e016      	b.n	80003fa <M_GPIO_void_SetPinValue+0xde>
			SET_BIT(GPIOB_ODR , PinID);
 80003cc:	4b0e      	ldr	r3, [pc, #56]	; (8000408 <M_GPIO_void_SetPinValue+0xec>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	79ba      	ldrb	r2, [r7, #6]
 80003d2:	2101      	movs	r1, #1
 80003d4:	fa01 f202 	lsl.w	r2, r1, r2
 80003d8:	4611      	mov	r1, r2
 80003da:	4a0b      	ldr	r2, [pc, #44]	; (8000408 <M_GPIO_void_SetPinValue+0xec>)
 80003dc:	430b      	orrs	r3, r1
 80003de:	6013      	str	r3, [r2, #0]
			break;
 80003e0:	e00b      	b.n	80003fa <M_GPIO_void_SetPinValue+0xde>
			SET_BIT(GPIOC_ODR , PinID);
 80003e2:	4b0a      	ldr	r3, [pc, #40]	; (800040c <M_GPIO_void_SetPinValue+0xf0>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	79ba      	ldrb	r2, [r7, #6]
 80003e8:	2101      	movs	r1, #1
 80003ea:	fa01 f202 	lsl.w	r2, r1, r2
 80003ee:	4611      	mov	r1, r2
 80003f0:	4a06      	ldr	r2, [pc, #24]	; (800040c <M_GPIO_void_SetPinValue+0xf0>)
 80003f2:	430b      	orrs	r3, r1
 80003f4:	6013      	str	r3, [r2, #0]
			break;
 80003f6:	e000      	b.n	80003fa <M_GPIO_void_SetPinValue+0xde>
	}
 80003f8:	bf00      	nop
}
 80003fa:	bf00      	nop
 80003fc:	370c      	adds	r7, #12
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr
 8000404:	4001080c 	.word	0x4001080c
 8000408:	40010c0c 	.word	0x40010c0c
 800040c:	4001100c 	.word	0x4001100c

08000410 <EXTI0_IRQHandler>:
	}
}

//External Peripherals
void	EXTI0_IRQHandler(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
	EXTI0_CallBack(); // Ahmed();
 8000414:	4b02      	ldr	r3, [pc, #8]	; (8000420 <EXTI0_IRQHandler+0x10>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4798      	blx	r3
}
 800041a:	bf00      	nop
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	2000001c 	.word	0x2000001c

08000424 <EXTI1_IRQHandler>:
	}
}

//External Peripherals
void	EXTI1_IRQHandler(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
	EXTI1_CallBack();
 8000428:	4b02      	ldr	r3, [pc, #8]	; (8000434 <EXTI1_IRQHandler+0x10>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4798      	blx	r3
}
 800042e:	bf00      	nop
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	20000020 	.word	0x20000020

08000438 <MRCC_voidSysClkInit>:




void	MRCC_voidSysClkInit(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
	#if			SYSTEM_CLK	==	RCC_HSI
				SET_BIT(RCC_CR,0);
 800043c:	4b0a      	ldr	r3, [pc, #40]	; (8000468 <MRCC_voidSysClkInit+0x30>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a09      	ldr	r2, [pc, #36]	; (8000468 <MRCC_voidSysClkInit+0x30>)
 8000442:	f043 0301 	orr.w	r3, r3, #1
 8000446:	6013      	str	r3, [r2, #0]
				CLR_BIT(RCC_CFGR,0);
 8000448:	4b08      	ldr	r3, [pc, #32]	; (800046c <MRCC_voidSysClkInit+0x34>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a07      	ldr	r2, [pc, #28]	; (800046c <MRCC_voidSysClkInit+0x34>)
 800044e:	f023 0301 	bic.w	r3, r3, #1
 8000452:	6013      	str	r3, [r2, #0]
				CLR_BIT(RCC_CFGR,1);
 8000454:	4b05      	ldr	r3, [pc, #20]	; (800046c <MRCC_voidSysClkInit+0x34>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a04      	ldr	r2, [pc, #16]	; (800046c <MRCC_voidSysClkInit+0x34>)
 800045a:	f023 0302 	bic.w	r3, r3, #2
 800045e:	6013      	str	r3, [r2, #0]
				CLR_BIT(RCC_CFGR,0);
				SET_BIT(RCC_CFGR,1);
	#else
		#error	"Wrong choice of RCC clock type"
	#endif
}
 8000460:	bf00      	nop
 8000462:	46bd      	mov	sp, r7
 8000464:	bc80      	pop	{r7}
 8000466:	4770      	bx	lr
 8000468:	40021000 	.word	0x40021000
 800046c:	40021004 	.word	0x40021004

08000470 <MRCC_voidEnablePerClk>:
void	MRCC_voidEnablePerClk(u8 PerBus,u8 PerNum)
{
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
 8000476:	4603      	mov	r3, r0
 8000478:	460a      	mov	r2, r1
 800047a:	71fb      	strb	r3, [r7, #7]
 800047c:	4613      	mov	r3, r2
 800047e:	71bb      	strb	r3, [r7, #6]
	/*	Range Check						*/
	if(PerNum<32)
 8000480:	79bb      	ldrb	r3, [r7, #6]
 8000482:	2b1f      	cmp	r3, #31
 8000484:	d82a      	bhi.n	80004dc <MRCC_voidEnablePerClk+0x6c>
	{
		switch(PerBus)
 8000486:	79fb      	ldrb	r3, [r7, #7]
 8000488:	2b02      	cmp	r3, #2
 800048a:	d01c      	beq.n	80004c6 <MRCC_voidEnablePerClk+0x56>
 800048c:	2b02      	cmp	r3, #2
 800048e:	dc25      	bgt.n	80004dc <MRCC_voidEnablePerClk+0x6c>
 8000490:	2b00      	cmp	r3, #0
 8000492:	d002      	beq.n	800049a <MRCC_voidEnablePerClk+0x2a>
 8000494:	2b01      	cmp	r3, #1
 8000496:	d00b      	beq.n	80004b0 <MRCC_voidEnablePerClk+0x40>
			case RCC_APB2	:	SET_BIT(RCC_APB2ENR,PerNum);	break;
		}
	}
	else
	{/*		Report Error 			*/}	
}
 8000498:	e020      	b.n	80004dc <MRCC_voidEnablePerClk+0x6c>
			case RCC_AHB	:	SET_BIT(RCC_AHBENR ,PerNum);	break;
 800049a:	4b13      	ldr	r3, [pc, #76]	; (80004e8 <MRCC_voidEnablePerClk+0x78>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	79ba      	ldrb	r2, [r7, #6]
 80004a0:	2101      	movs	r1, #1
 80004a2:	fa01 f202 	lsl.w	r2, r1, r2
 80004a6:	4611      	mov	r1, r2
 80004a8:	4a0f      	ldr	r2, [pc, #60]	; (80004e8 <MRCC_voidEnablePerClk+0x78>)
 80004aa:	430b      	orrs	r3, r1
 80004ac:	6013      	str	r3, [r2, #0]
 80004ae:	e015      	b.n	80004dc <MRCC_voidEnablePerClk+0x6c>
			case RCC_APB1	:	SET_BIT(RCC_APB1ENR,PerNum);	break;
 80004b0:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <MRCC_voidEnablePerClk+0x7c>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	79ba      	ldrb	r2, [r7, #6]
 80004b6:	2101      	movs	r1, #1
 80004b8:	fa01 f202 	lsl.w	r2, r1, r2
 80004bc:	4611      	mov	r1, r2
 80004be:	4a0b      	ldr	r2, [pc, #44]	; (80004ec <MRCC_voidEnablePerClk+0x7c>)
 80004c0:	430b      	orrs	r3, r1
 80004c2:	6013      	str	r3, [r2, #0]
 80004c4:	e00a      	b.n	80004dc <MRCC_voidEnablePerClk+0x6c>
			case RCC_APB2	:	SET_BIT(RCC_APB2ENR,PerNum);	break;
 80004c6:	4b0a      	ldr	r3, [pc, #40]	; (80004f0 <MRCC_voidEnablePerClk+0x80>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	79ba      	ldrb	r2, [r7, #6]
 80004cc:	2101      	movs	r1, #1
 80004ce:	fa01 f202 	lsl.w	r2, r1, r2
 80004d2:	4611      	mov	r1, r2
 80004d4:	4a06      	ldr	r2, [pc, #24]	; (80004f0 <MRCC_voidEnablePerClk+0x80>)
 80004d6:	430b      	orrs	r3, r1
 80004d8:	6013      	str	r3, [r2, #0]
 80004da:	bf00      	nop
}
 80004dc:	bf00      	nop
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bc80      	pop	{r7}
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	40021014 	.word	0x40021014
 80004ec:	4002101c 	.word	0x4002101c
 80004f0:	40021018 	.word	0x40021018

080004f4 <main>:
void	Task1(void);
void	Task2(void);
void	Task3(void);

int	main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	/*	Initialization Part		*/
	
	/*	System Clk init			*/
	MRCC_voidSysClkInit();
 80004f8:	f7ff ff9e 	bl	8000438 <MRCC_voidSysClkInit>
	
	/*	Toggle Led C13	GPIOC	*/
	/*	1- Enable Per Clk "RCC" Port C		*/
	MRCC_voidEnablePerClk(RCC_APB2,4);
 80004fc:	2104      	movs	r1, #4
 80004fe:	2002      	movs	r0, #2
 8000500:	f7ff ffb6 	bl	8000470 <MRCC_voidEnablePerClk>
	
	/*	Direction for C13 is output Push Pull */
	M_GPIO_void_SetPinDir(PORTC_ID, PIN13_ID, OUT_2MHZ_PP);
 8000504:	2202      	movs	r2, #2
 8000506:	210d      	movs	r1, #13
 8000508:	2002      	movs	r0, #2
 800050a:	f7ff fe31 	bl	8000170 <M_GPIO_void_SetPinDir>
	M_GPIO_void_SetPinDir(PORTC_ID, PIN14_ID, OUT_2MHZ_PP);
 800050e:	2202      	movs	r2, #2
 8000510:	210e      	movs	r1, #14
 8000512:	2002      	movs	r0, #2
 8000514:	f7ff fe2c 	bl	8000170 <M_GPIO_void_SetPinDir>
	M_GPIO_void_SetPinDir(PORTC_ID, PIN15_ID, OUT_2MHZ_PP);
 8000518:	2202      	movs	r2, #2
 800051a:	210f      	movs	r1, #15
 800051c:	2002      	movs	r0, #2
 800051e:	f7ff fe27 	bl	8000170 <M_GPIO_void_SetPinDir>
	//RTOS_voidCreatTask(0,1000,Task1);
	//RTOS_voidCreatTask(1,2000,Task2);
	//RTOS_voidCreatTask(2,3000,Task3);
	/*	RTOS initilaization	*/

	RTOS_voidCreatTask(0, 0, 1,Task1);
 8000522:	4b0a      	ldr	r3, [pc, #40]	; (800054c <main+0x58>)
 8000524:	2201      	movs	r2, #1
 8000526:	2100      	movs	r1, #0
 8000528:	2000      	movs	r0, #0
 800052a:	f000 f877 	bl	800061c <RTOS_voidCreatTask>
	RTOS_voidCreatTask(1,1, 2,Task2);
 800052e:	4b08      	ldr	r3, [pc, #32]	; (8000550 <main+0x5c>)
 8000530:	2202      	movs	r2, #2
 8000532:	2101      	movs	r1, #1
 8000534:	2001      	movs	r0, #1
 8000536:	f000 f871 	bl	800061c <RTOS_voidCreatTask>
	RTOS_voidCreatTask(2,2, 3,Task3);
 800053a:	4b06      	ldr	r3, [pc, #24]	; (8000554 <main+0x60>)
 800053c:	2203      	movs	r2, #3
 800053e:	2102      	movs	r1, #2
 8000540:	2002      	movs	r0, #2
 8000542:	f000 f86b 	bl	800061c <RTOS_voidCreatTask>
	RTOS_voidInit();
 8000546:	f000 f85b 	bl	8000600 <RTOS_voidInit>
	
	
	while(1)
 800054a:	e7fe      	b.n	800054a <main+0x56>
 800054c:	08000559 	.word	0x08000559
 8000550:	08000591 	.word	0x08000591
 8000554:	080005c9 	.word	0x080005c9

08000558 <Task1>:
	return 0;
}


void	Task1(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
	static u8	flag1 = 0;
	if(flag1 == 0)
 800055c:	4b0b      	ldr	r3, [pc, #44]	; (800058c <Task1+0x34>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d108      	bne.n	8000576 <Task1+0x1e>
	{
		M_GPIO_void_SetPinValue(PORTC_ID, PIN13_ID, LOW);
 8000564:	2200      	movs	r2, #0
 8000566:	210d      	movs	r1, #13
 8000568:	2002      	movs	r0, #2
 800056a:	f7ff fed7 	bl	800031c <M_GPIO_void_SetPinValue>
		flag1 = 1;
 800056e:	4b07      	ldr	r3, [pc, #28]	; (800058c <Task1+0x34>)
 8000570:	2201      	movs	r2, #1
 8000572:	701a      	strb	r2, [r3, #0]
	}else
	{
		M_GPIO_void_SetPinValue(PORTC_ID, PIN13_ID,HIGH);
		flag1 = 0;
	}
}
 8000574:	e007      	b.n	8000586 <Task1+0x2e>
		M_GPIO_void_SetPinValue(PORTC_ID, PIN13_ID,HIGH);
 8000576:	2201      	movs	r2, #1
 8000578:	210d      	movs	r1, #13
 800057a:	2002      	movs	r0, #2
 800057c:	f7ff fece 	bl	800031c <M_GPIO_void_SetPinValue>
		flag1 = 0;
 8000580:	4b02      	ldr	r3, [pc, #8]	; (800058c <Task1+0x34>)
 8000582:	2200      	movs	r2, #0
 8000584:	701a      	strb	r2, [r3, #0]
}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	20000024 	.word	0x20000024

08000590 <Task2>:

void	Task2(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	static u8	flag2 = 0;
	if(flag2 == 0)
 8000594:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <Task2+0x34>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d108      	bne.n	80005ae <Task2+0x1e>
	{
		M_GPIO_void_SetPinValue(PORTC_ID, PIN14_ID, LOW);
 800059c:	2200      	movs	r2, #0
 800059e:	210e      	movs	r1, #14
 80005a0:	2002      	movs	r0, #2
 80005a2:	f7ff febb 	bl	800031c <M_GPIO_void_SetPinValue>
		flag2 = 1;
 80005a6:	4b07      	ldr	r3, [pc, #28]	; (80005c4 <Task2+0x34>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	701a      	strb	r2, [r3, #0]
	}else
	{
		M_GPIO_void_SetPinValue(PORTC_ID, PIN14_ID,HIGH);
		flag2 = 0;
	}
}
 80005ac:	e007      	b.n	80005be <Task2+0x2e>
		M_GPIO_void_SetPinValue(PORTC_ID, PIN14_ID,HIGH);
 80005ae:	2201      	movs	r2, #1
 80005b0:	210e      	movs	r1, #14
 80005b2:	2002      	movs	r0, #2
 80005b4:	f7ff feb2 	bl	800031c <M_GPIO_void_SetPinValue>
		flag2 = 0;
 80005b8:	4b02      	ldr	r3, [pc, #8]	; (80005c4 <Task2+0x34>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	701a      	strb	r2, [r3, #0]
}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000025 	.word	0x20000025

080005c8 <Task3>:

void	Task3(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
	static u8	flag3 = 0;
	if(flag3 == 0)
 80005cc:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <Task3+0x34>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d108      	bne.n	80005e6 <Task3+0x1e>
	{
		M_GPIO_void_SetPinValue(PORTC_ID, PIN15_ID, LOW);
 80005d4:	2200      	movs	r2, #0
 80005d6:	210f      	movs	r1, #15
 80005d8:	2002      	movs	r0, #2
 80005da:	f7ff fe9f 	bl	800031c <M_GPIO_void_SetPinValue>
		flag3 = 1;
 80005de:	4b07      	ldr	r3, [pc, #28]	; (80005fc <Task3+0x34>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	701a      	strb	r2, [r3, #0]
	}else
	{
		M_GPIO_void_SetPinValue(PORTC_ID, PIN15_ID, HIGH);
		flag3 = 0;
	}
}
 80005e4:	e007      	b.n	80005f6 <Task3+0x2e>
		M_GPIO_void_SetPinValue(PORTC_ID, PIN15_ID, HIGH);
 80005e6:	2201      	movs	r2, #1
 80005e8:	210f      	movs	r1, #15
 80005ea:	2002      	movs	r0, #2
 80005ec:	f7ff fe96 	bl	800031c <M_GPIO_void_SetPinValue>
		flag3 = 0;
 80005f0:	4b02      	ldr	r3, [pc, #8]	; (80005fc <Task3+0x34>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	701a      	strb	r2, [r3, #0]
}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	20000026 	.word	0x20000026

08000600 <RTOS_voidInit>:
#endif

static Task_TCB Tasks[NUM_OF_TASKS];
static u16 Ticks = 0 ;
void	RTOS_voidInit(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	/*	Tick Time = 1 msec				*/
	/*	SysTick Init, SysTick = 1usec	*/
	STK_voidInit();
 8000604:	f000 f866 	bl	80006d4 <STK_voidInit>
	/*	SysTick call 1000usec = 1msec	*/
	STK_voidSetIntervalPeriodic(1000000,RTOS_voidScheduler);
 8000608:	4902      	ldr	r1, [pc, #8]	; (8000614 <RTOS_voidInit+0x14>)
 800060a:	4803      	ldr	r0, [pc, #12]	; (8000618 <RTOS_voidInit+0x18>)
 800060c:	f000 f86e 	bl	80006ec <STK_voidSetIntervalPeriodic>
}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}
 8000614:	08000661 	.word	0x08000661
 8000618:	000f4240 	.word	0x000f4240

0800061c <RTOS_voidCreatTask>:
void	RTOS_voidCreatTask(u8 priority ,u16 FDelay ,u16 period, void (*ptr_f)(void))
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	4603      	mov	r3, r0
 8000626:	73fb      	strb	r3, [r7, #15]
 8000628:	460b      	mov	r3, r1
 800062a:	81bb      	strh	r3, [r7, #12]
 800062c:	4613      	mov	r3, r2
 800062e:	817b      	strh	r3, [r7, #10]
	Tasks[priority].u16_Periodicity = 	period;
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	490a      	ldr	r1, [pc, #40]	; (800065c <RTOS_voidCreatTask+0x40>)
 8000634:	897a      	ldrh	r2, [r7, #10]
 8000636:	f821 2033 	strh.w	r2, [r1, r3, lsl #3]
	Tasks[priority].u16_FirstDelay=FDelay;
 800063a:	7bfb      	ldrb	r3, [r7, #15]
 800063c:	4a07      	ldr	r2, [pc, #28]	; (800065c <RTOS_voidCreatTask+0x40>)
 800063e:	00db      	lsls	r3, r3, #3
 8000640:	4413      	add	r3, r2
 8000642:	89ba      	ldrh	r2, [r7, #12]
 8000644:	805a      	strh	r2, [r3, #2]
	Tasks[priority].pf = 	ptr_f;
 8000646:	7bfb      	ldrb	r3, [r7, #15]
 8000648:	4a04      	ldr	r2, [pc, #16]	; (800065c <RTOS_voidCreatTask+0x40>)
 800064a:	00db      	lsls	r3, r3, #3
 800064c:	4413      	add	r3, r2
 800064e:	687a      	ldr	r2, [r7, #4]
 8000650:	605a      	str	r2, [r3, #4]
}
 8000652:	bf00      	nop
 8000654:	3714      	adds	r7, #20
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr
 800065c:	20000028 	.word	0x20000028

08000660 <RTOS_voidScheduler>:
	}
	Ticks++;
}
*/
static void RTOS_voidScheduler(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
	for(u8 i = 0 ; i < NUM_OF_TASKS ; i++)
 8000666:	2300      	movs	r3, #0
 8000668:	71fb      	strb	r3, [r7, #7]
 800066a:	e028      	b.n	80006be <RTOS_voidScheduler+0x5e>
	{
		if((Tasks[i].u16_FirstDelay) == 0 )
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	4a18      	ldr	r2, [pc, #96]	; (80006d0 <RTOS_voidScheduler+0x70>)
 8000670:	00db      	lsls	r3, r3, #3
 8000672:	4413      	add	r3, r2
 8000674:	885b      	ldrh	r3, [r3, #2]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d112      	bne.n	80006a0 <RTOS_voidScheduler+0x40>
		{
			/*	Call the Function		*/
			Tasks[i].pf();
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	4a14      	ldr	r2, [pc, #80]	; (80006d0 <RTOS_voidScheduler+0x70>)
 800067e:	00db      	lsls	r3, r3, #3
 8000680:	4413      	add	r3, r2
 8000682:	685b      	ldr	r3, [r3, #4]
 8000684:	4798      	blx	r3
			Tasks[i].u16_FirstDelay = Tasks[i].u16_Periodicity -1;
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	4a11      	ldr	r2, [pc, #68]	; (80006d0 <RTOS_voidScheduler+0x70>)
 800068a:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	3a01      	subs	r2, #1
 8000692:	b291      	uxth	r1, r2
 8000694:	4a0e      	ldr	r2, [pc, #56]	; (80006d0 <RTOS_voidScheduler+0x70>)
 8000696:	00db      	lsls	r3, r3, #3
 8000698:	4413      	add	r3, r2
 800069a:	460a      	mov	r2, r1
 800069c:	805a      	strh	r2, [r3, #2]
 800069e:	e00b      	b.n	80006b8 <RTOS_voidScheduler+0x58>
		}
		else
		{
			Tasks[i].u16_FirstDelay--;
 80006a0:	79fa      	ldrb	r2, [r7, #7]
 80006a2:	490b      	ldr	r1, [pc, #44]	; (80006d0 <RTOS_voidScheduler+0x70>)
 80006a4:	00d3      	lsls	r3, r2, #3
 80006a6:	440b      	add	r3, r1
 80006a8:	885b      	ldrh	r3, [r3, #2]
 80006aa:	3b01      	subs	r3, #1
 80006ac:	b298      	uxth	r0, r3
 80006ae:	4908      	ldr	r1, [pc, #32]	; (80006d0 <RTOS_voidScheduler+0x70>)
 80006b0:	00d3      	lsls	r3, r2, #3
 80006b2:	440b      	add	r3, r1
 80006b4:	4602      	mov	r2, r0
 80006b6:	805a      	strh	r2, [r3, #2]
	for(u8 i = 0 ; i < NUM_OF_TASKS ; i++)
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	3301      	adds	r3, #1
 80006bc:	71fb      	strb	r3, [r7, #7]
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	2b02      	cmp	r3, #2
 80006c2:	d9d3      	bls.n	800066c <RTOS_voidScheduler+0xc>
		}
	}

}
 80006c4:	bf00      	nop
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000028 	.word	0x20000028

080006d4 <STK_voidInit>:
#endif

static void (*SysTick_CallBack) (void) = NULL;
static u8	STK_u8ModeOfInterval;
void	STK_voidInit(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
		
	#if		STK_CLK_SRC		==		STK_AHB_DIV_8
				STK -> CTRL = 0x00000000 ;
 80006d8:	4b03      	ldr	r3, [pc, #12]	; (80006e8 <STK_voidInit+0x14>)
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
				STK -> CTRL = 0x00000004 ;
	#else	
		#error	"Wrong choice of SysTick Prescaller"
	#endif
		
}
 80006de:	bf00      	nop
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	e000e010 	.word	0xe000e010

080006ec <STK_voidSetIntervalPeriodic>:
	SET_BIT(STK -> CTRL , 1);
	
}

void	STK_voidSetIntervalPeriodic(u32 Ticks,void (*Pf)(void))
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	6039      	str	r1, [r7, #0]
	/*		Load Ticks to Load Register		*/
	STK -> LOAD	= Ticks;
 80006f6:	4a0d      	ldr	r2, [pc, #52]	; (800072c <STK_voidSetIntervalPeriodic+0x40>)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	6053      	str	r3, [r2, #4]
	/*		Start Timer 					*/
	SET_BIT(STK -> CTRL , 0);
 80006fc:	4b0b      	ldr	r3, [pc, #44]	; (800072c <STK_voidSetIntervalPeriodic+0x40>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a0a      	ldr	r2, [pc, #40]	; (800072c <STK_voidSetIntervalPeriodic+0x40>)
 8000702:	f043 0301 	orr.w	r3, r3, #1
 8000706:	6013      	str	r3, [r2, #0]
	/*		Save CallBack					*/
	SysTick_CallBack = Pf;
 8000708:	4a09      	ldr	r2, [pc, #36]	; (8000730 <STK_voidSetIntervalPeriodic+0x44>)
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	6013      	str	r3, [r2, #0]
	/*		Software Flage to indicate which callback will execute	*/
	STK_u8ModeOfInterval = STK_PERIOD_INTERVAL;	
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <STK_voidSetIntervalPeriodic+0x48>)
 8000710:	2204      	movs	r2, #4
 8000712:	701a      	strb	r2, [r3, #0]
	/*		SysTick Interrupt Enable PIE	*/
	SET_BIT(STK -> CTRL , 1);
 8000714:	4b05      	ldr	r3, [pc, #20]	; (800072c <STK_voidSetIntervalPeriodic+0x40>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a04      	ldr	r2, [pc, #16]	; (800072c <STK_voidSetIntervalPeriodic+0x40>)
 800071a:	f043 0302 	orr.w	r3, r3, #2
 800071e:	6013      	str	r3, [r2, #0]
	
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	e000e010 	.word	0xe000e010
 8000730:	20000040 	.word	0x20000040
 8000734:	20000044 	.word	0x20000044

08000738 <SysTick_Handler>:
	Local_u32RemainingTime =  (STK -> VAL);
	return Local_u32RemainingTime;
}
//Core Peripheral
void	SysTick_Handler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
	u8 Local_u8Temp ;
	if(STK_u8ModeOfInterval == STK_SINGLE_INTERVAL)
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <SysTick_Handler+0x50>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b02      	cmp	r3, #2
 8000744:	d111      	bne.n	800076a <SysTick_Handler+0x32>
	{
		/*	1- Disable the Interrupt 	*/
			CLR_BIT(STK -> CTRL , 1);
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <SysTick_Handler+0x54>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a10      	ldr	r2, [pc, #64]	; (800078c <SysTick_Handler+0x54>)
 800074c:	f023 0302 	bic.w	r3, r3, #2
 8000750:	6013      	str	r3, [r2, #0]
		/*	2- Stop the timer			*/
			CLR_BIT(STK -> CTRL , 0);
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <SysTick_Handler+0x54>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a0d      	ldr	r2, [pc, #52]	; (800078c <SysTick_Handler+0x54>)
 8000758:	f023 0301 	bic.w	r3, r3, #1
 800075c:	6013      	str	r3, [r2, #0]
			STK -> LOAD	= 0;
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <SysTick_Handler+0x54>)
 8000760:	2200      	movs	r2, #0
 8000762:	605a      	str	r2, [r3, #4]
			STK -> VAL	= 0;
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <SysTick_Handler+0x54>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
	}
	SysTick_CallBack();
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <SysTick_Handler+0x58>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4798      	blx	r3
	/*	Clear Interrupt Flag by reading the Flag */
	Local_u8Temp	=	GET_BIT(STK -> CTRL , 16);
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <SysTick_Handler+0x54>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	0c1b      	lsrs	r3, r3, #16
 8000776:	b2db      	uxtb	r3, r3
 8000778:	f003 0301 	and.w	r3, r3, #1
 800077c:	71fb      	strb	r3, [r7, #7]
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000044 	.word	0x20000044
 800078c:	e000e010 	.word	0xe000e010
 8000790:	20000040 	.word	0x20000040

08000794 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000794:	480d      	ldr	r0, [pc, #52]	; (80007cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000796:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000798:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800079c:	480c      	ldr	r0, [pc, #48]	; (80007d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800079e:	490d      	ldr	r1, [pc, #52]	; (80007d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007a0:	4a0d      	ldr	r2, [pc, #52]	; (80007d8 <LoopForever+0xe>)
  movs r3, #0
 80007a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007a4:	e002      	b.n	80007ac <LoopCopyDataInit>

080007a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007aa:	3304      	adds	r3, #4

080007ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b0:	d3f9      	bcc.n	80007a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007b2:	4a0a      	ldr	r2, [pc, #40]	; (80007dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80007b4:	4c0a      	ldr	r4, [pc, #40]	; (80007e0 <LoopForever+0x16>)
  movs r3, #0
 80007b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007b8:	e001      	b.n	80007be <LoopFillZerobss>

080007ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007bc:	3204      	adds	r2, #4

080007be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c0:	d3fb      	bcc.n	80007ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007c2:	f000 f811 	bl	80007e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007c6:	f7ff fe95 	bl	80004f4 <main>

080007ca <LoopForever>:

LoopForever:
  b LoopForever
 80007ca:	e7fe      	b.n	80007ca <LoopForever>
  ldr   r0, =_estack
 80007cc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80007d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007d4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80007d8:	08000850 	.word	0x08000850
  ldr r2, =_sbss
 80007dc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80007e0:	20000048 	.word	0x20000048

080007e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007e4:	e7fe      	b.n	80007e4 <ADC1_2_IRQHandler>
	...

080007e8 <__libc_init_array>:
 80007e8:	b570      	push	{r4, r5, r6, lr}
 80007ea:	2600      	movs	r6, #0
 80007ec:	4d0c      	ldr	r5, [pc, #48]	; (8000820 <__libc_init_array+0x38>)
 80007ee:	4c0d      	ldr	r4, [pc, #52]	; (8000824 <__libc_init_array+0x3c>)
 80007f0:	1b64      	subs	r4, r4, r5
 80007f2:	10a4      	asrs	r4, r4, #2
 80007f4:	42a6      	cmp	r6, r4
 80007f6:	d109      	bne.n	800080c <__libc_init_array+0x24>
 80007f8:	f000 f81a 	bl	8000830 <_init>
 80007fc:	2600      	movs	r6, #0
 80007fe:	4d0a      	ldr	r5, [pc, #40]	; (8000828 <__libc_init_array+0x40>)
 8000800:	4c0a      	ldr	r4, [pc, #40]	; (800082c <__libc_init_array+0x44>)
 8000802:	1b64      	subs	r4, r4, r5
 8000804:	10a4      	asrs	r4, r4, #2
 8000806:	42a6      	cmp	r6, r4
 8000808:	d105      	bne.n	8000816 <__libc_init_array+0x2e>
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000810:	4798      	blx	r3
 8000812:	3601      	adds	r6, #1
 8000814:	e7ee      	b.n	80007f4 <__libc_init_array+0xc>
 8000816:	f855 3b04 	ldr.w	r3, [r5], #4
 800081a:	4798      	blx	r3
 800081c:	3601      	adds	r6, #1
 800081e:	e7f2      	b.n	8000806 <__libc_init_array+0x1e>
 8000820:	08000848 	.word	0x08000848
 8000824:	08000848 	.word	0x08000848
 8000828:	08000848 	.word	0x08000848
 800082c:	0800084c 	.word	0x0800084c

08000830 <_init>:
 8000830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000832:	bf00      	nop
 8000834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000836:	bc08      	pop	{r3}
 8000838:	469e      	mov	lr, r3
 800083a:	4770      	bx	lr

0800083c <_fini>:
 800083c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800083e:	bf00      	nop
 8000840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000842:	bc08      	pop	{r3}
 8000844:	469e      	mov	lr, r3
 8000846:	4770      	bx	lr
